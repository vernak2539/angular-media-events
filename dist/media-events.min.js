/**
 * angular-media-events - angular directives for media events
 * @author Alex Vernacchia <alvernacchia@gmail.com>
 * @version 0.4.0
 * @repo https://github.com/vernak2539/angular-media-events
 * @license MIT
 * Created: Fri May 13 2016 11:35:17 GMT+0100 (GMT Summer Time)
 */
!function(){"use strict";angular.module("media-events",[]).service("eval-service",[function(){this.scopeEval=function(e){var t;e=e||{},t=e.scope;var n={$event:e.$event};e.attrs&&(n.attrs=e.attrs),t.$eval(e.fn,n)}}])}(),function(){"use strict";angular.module("media-events").directive("loadedMetadata",["eval-service",function(e){return{restrict:"A",scope:!0,link:function(t,n,i){n.on("loadedmetadata",function(n){var s={width:this.videoWidth,height:this.videoHeight};e.scopeEval({scope:t,fn:i.loadedMetadata,$event:n,attrs:s})})}}}])}(),function(){"use strict";angular.module("media-events").directive("onPause",["eval-service",function(e){return{restrict:"A",scope:!0,link:function(t,n,i){n.on("pause",function(n){e.scopeEval({scope:t,fn:i.onPause,$event:n})})}}}])}(),function(){"use strict";angular.module("media-events").directive("onPlay",["eval-service",function(e){return{restrict:"A",scope:!0,link:function(t,n,i){n.on("play",function(n){e.scopeEval({scope:t,fn:i.onPlay,$event:n})})}}}])}(),function(){"use strict";angular.module("media-events").directive("progress",["eval-service",function(e){return{restrict:"A",scope:!0,link:function(t,n,i){n.on("progress",function(n){var s={buffered:this.buffered};e.scopeEval({scope:t,fn:i.progress,$event:n,attrs:s})})}}}])}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9tb2R1bGUuanMiLCJsb2FkZWRtZXRhZGF0YS5qcyIsInBhdXNlLmpzIiwicGxheS5qcyIsInByb2dyZXNzLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJzZXJ2aWNlIiwidGhpcyIsInNjb3BlRXZhbCIsIm9wdGlvbnMiLCJzY29wZSIsImxvY2FscyIsIiRldmVudCIsImF0dHJzIiwiJGV2YWwiLCJmbiIsImRpcmVjdGl2ZSIsImV2YWxTZXJ2aWNlIiwicmVzdHJpY3QiLCJsaW5rIiwiZWxlbWVudCIsIm9uIiwiZXZlbnQiLCJ3aWR0aCIsInZpZGVvV2lkdGgiLCJoZWlnaHQiLCJ2aWRlb0hlaWdodCIsImxvYWRlZE1ldGFkYXRhIiwib25QYXVzZSIsIm9uUGxheSIsImJ1ZmZlcmVkIiwicHJvZ3Jlc3MiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0NBQUEsV0FDQSxZQUVBQSxTQUNBQyxPQUFBLG1CQUNBQyxRQUFBLGdCQUNBLFdBQ0FDLEtBQUFDLFVBQUEsU0FBQUMsR0FDQSxHQUFBQyxFQUVBRCxHQUFBQSxNQUNBQyxFQUFBRCxFQUFBQyxLQUVBLElBQUFDLElBQ0FDLE9BQUFILEVBQUFHLE9BR0FILEdBQUFJLFFBQ0FGLEVBQUFFLE1BQUFKLEVBQUFJLE9BR0FILEVBQUFJLE1BQUFMLEVBQUFNLEdBQUFKLFVDckJBLFdBQ0EsWUFFQVAsU0FDQUMsT0FBQSxnQkFDQVcsVUFBQSxrQkFDQSxlQUNBLFNBQUFDLEdBQ0EsT0FDQUMsU0FBQSxJQUNBUixPQUFBLEVBQ0FTLEtBQUEsU0FBQVQsRUFBQVUsRUFBQVAsR0FDQU8sRUFBQUMsR0FBQSxpQkFBQSxTQUFBQyxHQUNBLEdBQUFYLElBQ0FZLE1BQUFoQixLQUFBaUIsV0FDQUMsT0FBQWxCLEtBQUFtQixZQUdBVCxHQUFBVCxXQUNBRSxNQUFBQSxFQUNBSyxHQUFBRixFQUFBYyxlQUNBZixPQUFBVSxFQUNBVCxNQUFBRixjQ3RCQSxXQUNBLFlBRUFQLFNBQ0FDLE9BQUEsZ0JBQ0FXLFVBQUEsV0FDQSxlQUNBLFNBQUFDLEdBQ0EsT0FDQUMsU0FBQSxJQUNBUixPQUFBLEVBQ0FTLEtBQUEsU0FBQVQsRUFBQVUsRUFBQVAsR0FDQU8sRUFBQUMsR0FBQSxRQUFBLFNBQUFDLEdBQ0FMLEVBQUFULFdBQ0FFLE1BQUFBLEVBQ0FLLEdBQUFGLEVBQUFlLFFBQ0FoQixPQUFBVSxjQ2hCQSxXQUNBLFlBRUFsQixTQUNBQyxPQUFBLGdCQUNBVyxVQUFBLFVBQ0EsZUFDQSxTQUFBQyxHQUNBLE9BQ0FDLFNBQUEsSUFDQVIsT0FBQSxFQUNBUyxLQUFBLFNBQUFULEVBQUFVLEVBQUFQLEdBQ0FPLEVBQUFDLEdBQUEsT0FBQSxTQUFBQyxHQUNBTCxFQUFBVCxXQUNBRSxNQUFBQSxFQUNBSyxHQUFBRixFQUFBZ0IsT0FDQWpCLE9BQUFVLGNDaEJBLFdBQ0EsWUFFQWxCLFNBQ0FDLE9BQUEsZ0JBQ0FXLFVBQUEsWUFDQSxlQUNBLFNBQUFDLEdBQ0EsT0FDQUMsU0FBQSxJQUNBUixPQUFBLEVBQ0FTLEtBQUEsU0FBQVQsRUFBQVUsRUFBQVAsR0FDQU8sRUFBQUMsR0FBQSxXQUFBLFNBQUFDLEdBQ0EsR0FBQVgsSUFDQW1CLFNBQUF2QixLQUFBdUIsU0FHQWIsR0FBQVQsV0FDQUUsTUFBQUEsRUFDQUssR0FBQUYsRUFBQWtCLFNBQ0FuQixPQUFBVSxFQUNBVCxNQUFBRiIsImZpbGUiOiJtZWRpYS1ldmVudHMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnbWVkaWEtZXZlbnRzJywgW10pXHJcbiAgICAuc2VydmljZSgnZXZhbC1zZXJ2aWNlJywgW1xyXG4gICAgICBmdW5jdGlvbigpIHtcclxuICAgICAgICB0aGlzLnNjb3BlRXZhbCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgICAgICAgIHZhciBzY29wZTtcclxuXHJcbiAgICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuICAgICAgICAgIHNjb3BlICAgPSBvcHRpb25zLnNjb3BlO1xyXG5cclxuICAgICAgICAgIHZhciBsb2NhbHMgPSB7XHJcbiAgICAgICAgICAgICRldmVudDogb3B0aW9ucy4kZXZlbnRcclxuICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgaWYob3B0aW9ucy5hdHRycykge1xyXG4gICAgICAgICAgICBsb2NhbHMuYXR0cnMgPSBvcHRpb25zLmF0dHJzO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHNjb3BlLiRldmFsKG9wdGlvbnMuZm4sIGxvY2Fscyk7XHJcbiAgICAgIH07XHJcbiAgICAgIH1cclxuICAgIF0pO1xyXG59KSgpO1xyXG4iLCIoZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICBhbmd1bGFyXHJcbiAgICAubW9kdWxlKCdtZWRpYS1ldmVudHMnKVxyXG4gICAgLmRpcmVjdGl2ZSgnbG9hZGVkTWV0YWRhdGEnLCBbXHJcbiAgICAgICdldmFsLXNlcnZpY2UnLFxyXG4gICAgICBmdW5jdGlvbihldmFsU2VydmljZSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICByZXN0cmljdDogJ0EnLFxyXG4gICAgICAgICAgc2NvcGU6IHRydWUsXHJcbiAgICAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcclxuICAgICAgICAgICAgZWxlbWVudC5vbignbG9hZGVkbWV0YWRhdGEnLCBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAgICAgICAgIHZhciBsb2NhbHMgPSB7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy52aWRlb1dpZHRoLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLnZpZGVvSGVpZ2h0XHJcbiAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgZXZhbFNlcnZpY2Uuc2NvcGVFdmFsKHtcclxuICAgICAgICAgICAgICAgIHNjb3BlOiBzY29wZSxcclxuICAgICAgICAgICAgICAgIGZuOiBhdHRycy5sb2FkZWRNZXRhZGF0YSxcclxuICAgICAgICAgICAgICAgICRldmVudDogZXZlbnQsXHJcbiAgICAgICAgICAgICAgICBhdHRyczogbG9jYWxzXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgIF0pO1xyXG5cclxufSkoKTtcclxuIiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnbWVkaWEtZXZlbnRzJylcclxuICAgIC5kaXJlY3RpdmUoJ29uUGF1c2UnLCBbXHJcbiAgICAgICdldmFsLXNlcnZpY2UnLFxyXG4gICAgICBmdW5jdGlvbihldmFsU2VydmljZSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICByZXN0cmljdDogJ0EnLFxyXG4gICAgICAgICAgc2NvcGU6IHRydWUsXHJcbiAgICAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcclxuICAgICAgICAgICAgZWxlbWVudC5vbigncGF1c2UnLCBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAgICAgICAgIGV2YWxTZXJ2aWNlLnNjb3BlRXZhbCh7XHJcbiAgICAgICAgICAgICAgICBzY29wZTogc2NvcGUsXHJcbiAgICAgICAgICAgICAgICBmbjogYXR0cnMub25QYXVzZSxcclxuICAgICAgICAgICAgICAgICRldmVudDogZXZlbnRcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgXSk7XHJcblxyXG59KSgpO1xyXG4iLCIoZnVuY3Rpb24oKSB7XHJcbiAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICBhbmd1bGFyXHJcbiAgICAubW9kdWxlKCdtZWRpYS1ldmVudHMnKVxyXG4gICAgLmRpcmVjdGl2ZSgnb25QbGF5JywgW1xyXG4gICAgICAnZXZhbC1zZXJ2aWNlJyxcclxuICAgICAgZnVuY3Rpb24oZXZhbFNlcnZpY2UpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgcmVzdHJpY3Q6ICdBJyxcclxuICAgICAgICAgIHNjb3BlOiB0cnVlLFxyXG4gICAgICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQub24oJ3BsYXknLCBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAgICAgICAgIGV2YWxTZXJ2aWNlLnNjb3BlRXZhbCh7XHJcbiAgICAgICAgICAgICAgICBzY29wZTogc2NvcGUsXHJcbiAgICAgICAgICAgICAgICBmbjogYXR0cnMub25QbGF5LFxyXG4gICAgICAgICAgICAgICAgJGV2ZW50OiBldmVudFxyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICBdKTtcclxufSkoKTtcclxuIiwiKGZ1bmN0aW9uKCkge1xyXG4gICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgYW5ndWxhclxyXG4gICAgLm1vZHVsZSgnbWVkaWEtZXZlbnRzJylcclxuICAgIC5kaXJlY3RpdmUoJ3Byb2dyZXNzJywgW1xyXG4gICAgICAnZXZhbC1zZXJ2aWNlJyxcclxuICAgICAgZnVuY3Rpb24oZXZhbFNlcnZpY2UpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgcmVzdHJpY3Q6ICdBJyxcclxuICAgICAgICAgIHNjb3BlOiB0cnVlLFxyXG4gICAgICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQub24oJ3Byb2dyZXNzJywgZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICAgICAgICB2YXIgbG9jYWxzID0ge1xyXG4gICAgICAgICAgICAgICAgYnVmZmVyZWQ6IHRoaXMuYnVmZmVyZWRcclxuICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICBldmFsU2VydmljZS5zY29wZUV2YWwoe1xyXG4gICAgICAgICAgICAgICAgc2NvcGU6IHNjb3BlLFxyXG4gICAgICAgICAgICAgICAgZm46IGF0dHJzLnByb2dyZXNzLFxyXG4gICAgICAgICAgICAgICAgJGV2ZW50OiBldmVudCxcclxuICAgICAgICAgICAgICAgIGF0dHJzOiBsb2NhbHNcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgXSk7XHJcbn0pKCk7XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
